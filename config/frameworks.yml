# Analyze frameworks. Note, these are just examples.
# TODO complete these rules
frameworks:
  max_depth: 5
  max_nested_depth: 1
  rules:

    # Detect Drupal by looking for drupal/core Composer requirements.
    # But exclude Drupal modules and themes that themselves require drupal/core.
    drupal:
      when: >
        !fs.path().contains("modules/") && !fs.path().contains("themes/") &&
        (fs.depExists("php", "drupal/core") || fs.depExists("php", "drupal/core-recommended"))
      then: drupal
      with:
        major_version: parseVersion(fs.depVersion("php", "drupal/core")).major
      exclusive: true
      group: php

    # The drupal/drupal package represents Drupal 7.
    drupal7-composer:
      when: fs.depExists("php", "drupal/drupal")
      then: drupal
      with:
        major_version: parseVersion(fs.depVersion("php", "drupal/drupal")).major
      exclusive: true
      group: php

    drupal-direct:
      when: fs.fileExists("index.php") && fs.fileContains("index.php", "drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);")
      then: drupal
      group: php

    symfony-project:
      when: fs.depExists("php", "symfony/*") && jq(fs.read("composer.json"), ".type") == "project"
      maybe: [symfony]
      group: php

    symfony-framework:
      when: fs.depExists("php", "symfony/framework-bundle")
      then: symfony
      with:
        major_version: parseVersion(fs.depVersion("php", "symfony/framework-bundle")).major
      group: php
      exclusive: true

    laravel-framework:
      when: fs.depExists("php", "laravel/framework")
      then: laravel
      with:
        major_version: parseVersion(fs.depVersion("php", "laravel/framework")).major
      group: php
      exclusive: true

    cakephp:
      when: fs.depExists("php", "cakephp/cakephp")
      then: cakephp
      with:
        version: parseVersion(fs.depVersion("php", "cakephp/cakephp"))
      group: php
      exclusive: true

    laminas:
      when: fs.depExists("php", "laminas/laminas-mvc")
      then: laminas
      with:
        version: parseVersion(fs.depVersion("php", "laminas/laminas-mvc"))
      group: php
      exclusive: true

    codeigniter:
      when: fs.depExists("php", "codeigniter4/framework")
      then: codeigniter
      with:
        major_version: parseVersion(fs.depVersion("php", "codeigniter4/framework")).major
      group: php
      exclusive: true

    wordpress:
      when: fs.fileExists("wp-config.php") || fs.depExists("php", "wordpress/wordpress")
      then: wordpress
      with:
        version: parseVersion(fs.depVersion("php", "wordpress/wordpress"))
      group: php
      exclusive: true

    express:
      when: fs.depExists("js", "express")
      then: express
      with:
        version: parseVersion(fs.depVersion("js", "express"))
      group: js

    gatsby:
      when: fs.fileExists("gatsby-config.js") || fs.depExists("js", "gatsby")
      then: gatsby
      with:
        version: parseVersion(fs.depVersion("js", "gatsby"))
      group: js
      exclusive: true

    strapi:
      when: fs.fileExists("strapi-config.json") || fs.depExists("js", "@strapi/strapi")
      then: strapi
      with:
        version: parseVersion(fs.depVersion("js", "@strapi/strapi"))
      group: js
      exclusive: true

    nestjs:
      when: fs.depExists("js", "@nestjs/core")
      then: nestjs
      with:
        version: parseVersion(fs.depVersion("js", "@nestjs/core"))
      group: js
      exclusive: true

    nextjs:
      when: fs.fileExists("next.config.js") || fs.depExists("js", "next")
      then: nextjs
      with:
        version: parseVersion(fs.depVersion("js", "next"))
      group: js
      exclusive: true

    svelte-kit:
      when: fs.depExists("js", "@sveltejs/kit")
      then: svelte-kit
      with:
        version: parseVersion(fs.depVersion("js", "@sveltejs/kit"))
      group: js
      exclusive: true

    reactjs:
      when: fs.depExists("js", "react")
      then: reactjs
      with:
        version: parseVersion(fs.depVersion("js", "react"))
      group: js

    vuejs:
      when: fs.depExists("js", "vue")
      then: vuejs
      with:
        version: parseVersion(fs.depVersion("js", "vue"))
      group: js
      exclusive: true

    magento:
      when: fs.depExists("php", "magento/magento-composer-installer")
      then: magento
      exclusive: true
      group: php

    gin:
      when: fs.depExists("go", "github.com/gin-gonic/gin")
      then: gin
      with:
        version: parseVersion(fs.depVersion("go", "github.com/gin-gonic/gin"))
      group: go

    fiber:
      when: fs.depExists("go", "github.com/gofiber/fiber*")
      then: fiber
      with:
        version: parseVersion(fs.depVersion("go", "github.com/gofiber/fiber/v2"))
      group: go

    echo:
      when: fs.depExists("go", "github.com/labstack/echo*")
      then: echo
      with:
        version: parseVersion(fs.depVersion("go", "github.com/labstack/echo/v4"))
      group: go

    flask:
      when: fs.depExists("python", "flask")
      then: flask
      group: python

    pyramid:
      when: fs.depExists("python", "pyramid")
      then: pyramid
      group: python

    fastapi:
      when: fs.depExists("python", "fastapi")
      then: fastapi
      group: python

    tornado:
      when: fs.depExists("python", "tornado")
      then: tornado
      group: python

    django:
      when: fs.depExists("python", "django")
      then: django
      group: python
      exclusive: true

    rails:
      when: fs.depExists("ruby", "rails")
      then: rails
      with:
        version: fs.depVersion("ruby", "rails")
      group: ruby
      exclusive: true

    jekyll:
      when: fs.depExists("ruby", "jekyll")
      then: jekyll
      with:
        version: fs.depVersion("ruby", "jekyll")
      group: ruby
      exclusive: true

    sinatra:
      when: fs.depExists("ruby", "sinatra")
      then: sinatra
      with:
        version: fs.depVersion("ruby", "sinatra")
      group: ruby
      exclusive: true

    spring-boot:
      when: fs.depExists("java", "org.springframework.boot:*")
      then: spring-boot
      with:
        version: parseVersion(fs.depVersion("java", "org.springframework.boot:spring-boot-starter-parent"))
      group: java
      exclusive: true

    quarkus:
      when: fs.depExists("java", "io.quarkus:*")
      then: quarkus
      with:
        version: parseVersion(fs.depVersion("java", "io.quarkus:quarkus-rest"))
      group: java
      exclusive: true

    rocket:
      when: fs.depExists("rust", "rocket")
      then: rocket
      with:
        version: parseVersion(fs.depVersion("rust", "rocket"))
      group: rust
      exclusive: true