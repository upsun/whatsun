# File analysis rules.
# The "when" conditions are evaluated using Common Expression Language (CEL).
# TODO generate CEL function docs

# Analyze package managers.
package_managers:
  rules:
  - when: file.exists("package-lock.json")
    then: npm
    not: [bun, pnpm, yarn]
  - when: file.exists("yarn.lock")
    then: yarn
    not: [bun, npm, pnpm]
  - when: file.exists("pnpm-lock.yaml")
    then: pnpm
    not: [bun, npm, yarn]
  - when: file.exists("bun.lock")
    then: bun
    not: [npm, pnpm, yarn]
  - when: file.exists("package.json")
    maybe: [npm, pnpm, yarn, bun]

  - when: file.exists("composer.json") || file.exists("composer.lock")
    then: composer

  - when: file.exists("requirements.txt")
    then: pip
  - when: file.exists("Pipfile")
    then: pipenv
  - when: file.exists("Pipfile.lock")
    then: pipenv
  - when: file.exists("pyproject.toml")
    maybe: [poetry, pip]
  - when: file.exists("poetry.lock")
    then: poetry

  - when: file.exists("gemfile*")
    then: bundler

  - when: file.exists("go.mod") || file.exists("go.mod")
    then: gomod

  - when: file.exists("cargo.toml") || file.exists("cargo.lock")
    then: cargo

  - when: file.exists("pom.xml")
    then: maven
  - when: file.exists("build.gradle")
    then: gradle
  - when: file.exists("build.gradle.kts")
    then: gradle
  - when: file.exists("settings.gradle")
    then: gradle
  - when: file.exists("gradle.properties")
    then: gradle
  - when: file.exists("gradlew")
    then: gradle
  - when: file.exists("gradlew.bat")
    then: gradle

  - when: file.exists("packages.lock.json")
    then: nuget

  - when: file.exists("mix.exs") || file.exists("mix.lock")
    then: mix

  - when: file.isDir("quicklisp")
    then: quicklisp

# Analyze frameworks. Note, these are just examples.
# TODO complete these rules
frameworks:
  rules:
    - when: composer.requires("drupal/core") || composer.requires("drupal/core-recommended")
      then: drupal
      # The "with" could supply extra data to the analysis output.
      # TODO implement this.
      with:
        major_version: version.parse(composer.lockedVersion("drupal/core")).major
      # TODO implement this.
      group: php

    # The drupal/drupal package represents Drupal 7.
    - when: composer.requires("drupal/drupal")
      then: drupal
      with:
        major_version: version.parse(composer.lockedVersion("drupal/drupal")).major
      group: php

    - when: composer.requires("symfony/*")
      maybe: [symfony]
      group: php

    - when: composer.requires("symfony/framework-bundle")
      then: symfony
      with:
        major_version: version.parse(composer.lockedVersion("symfony/framework-bundle")).major
      group: php

    - when: file.exists("package.json") && file.contains("package.json", "expressjs/express")
      then: express
      group: js
